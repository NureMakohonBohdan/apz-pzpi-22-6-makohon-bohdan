МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ




Практична робота №1


з дисципліни
«Архітектура програмного забезпечення»





Харків 2025

1 ІСТОРІЯ ЗМІН
Зміни звіту наведені у таблиці 1.1.
Таблиця 1.1 - Історія змін
№	Дата	Версія звіту	Опис змін
1	14.06.2025	0.1	Створено розділ “Історія змін”
2	14.06.2025	0.1	Створено розділ “Завдання”
3	14.06.2025	0.1	Створено розділ “Опис виконаної роботи”
4	14.06.2025	0.1	Створено розділ “Висновки”
5   14.06.2025	0.1	Додані посилання і хронологічний опис доповіді у Додаток А
6	14.06.2025	0.1	Додані слайди презентації у Додаток Б
7	14.06.2025	0.1	Додані приклади програмного коду у Додаток В


2 ЗАВДАННЯ
Підготувати доповідь на тему: Паттерн проектування «Фасад»
Створити та оформити слайди презентації доповіді
Створити та опублікувати на YouTube відеозапис доповіді
Оформити та завантажити на dl.nure.ua звіт до виконаної роботи
При потребі створити та налаштувати у GitHub обліковий запис для облікового запису студента в домені @nure.ua
Створити для виконання завдань з дисципліни GitHub репозиторій iз вказаним на https://dl.nure.ua іменем та з головною гілкою main
Створити у корені створеного репозиторію файл README.md з вказаним далі змістом та вказані далі директорії для окремих завдань
Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract1 у репозиторії GitHub
Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ1

3 ОПИС ВИКОНАНОЇ РОБОТИ
У ході виконання роботи було підготовлено змістовну презентацію на тему «Патерн проектування: Фасад».
Основною метою стало ознайомлення з одним із ключових структурних патернів об'єктно-орієнтованого програмування, що сприяє зниженню складності програмного коду та покращенню його підтримуваності.
На першому етапі було вивчено сутність патерну «Фасад», який полягає в наданні спрощеного інтерфейсу до складної підсистеми або групи класів. Далі проаналізовано проблему, що виникає при прямій взаємодії клієнтського коду з великою кількістю класів, та запропоновано рішення у вигляді впровадження фасадного класу.
У структурному розділі було деталізовано основні компоненти патерну: клієнт, фасад та підсистеми. Пояснено принципи їх взаємодії та розподіл відповідальності між ними.
Окрему увагу приділено випадкам застосування патерну, зокрема — у проектах з великою кількістю залежностей, для ізоляції шарів логіки або при роботі зі сторонніми бібліотеками.
У розділі, присвяченому реалізації, було розглянуто кроки впровадження патерну «Фасад» у програмному забезпеченні: від аналізу підсистем до створення фасадного класу та заміни прямих викликів на високорівневі методи фасаду.
Також наведено переваги використання цього підходу (спрощення інтерфейсу, ізоляція клієнта від змін, підвищення модульності) та його потенційні недоліки (ризик створення надмірно універсального класу, приховування функціоналу).
Для закріплення теоретичних знань було реалізовано приклад на мові програмування Java, що демонструє застосування фасаду для обробки медіафайлів. Наведено код підсистем, фасаду та клієнтського виклику, що ілюструє практичну користь патерну.
У підсумку було зроблено висновки щодо доцільності використання патерну «Фасад» у складних програмних рішеннях, а також наведено джерела, що стали основою для дослідження теми.

4 ВИСНОВКИ
Патерн «Фасад» є невід’ємною частиною «арсеналу» розробника, особливо коли мова йде про створення чи підтримку масштабних проєктів. Він пропонує очевидний спосіб розділити систему на «внутрішню» (деталі реалізації) та «зовнішню» (зручний інтерфейс). Таким чином, зменшується когнітивне навантаження на людей, які користуються системою, та надається можливість гнучко модифікувати внутрішню логіку без критичних змін у клієнтському коді.
У великих командах фасад гарантує, що новачки чи суміжні відділи можуть швидко зрозуміти високорівневі функції проєкту, не занурюючись у всі глибинні деталі. Проте важливо тримати баланс, щоб не перенавантажувати фасад зайвими завданнями і не приховувати критично важливі функції підсистем, які могли б бути безпосередньо корисними клієнтам. Якщо все реалізувати розумно, фасад стає зручною точкою входу в систему та покращує модульність розробленого рішення.

Додаток А
Посилання на відео та хронологічний опис

Відеозапис доповіді на YouTube: https://youtu.be/2fArVLwehz4

Хронологічний опис доповіді:

0:00 Вступ
0:10 Фасад
0:32 Проблема та рішення патерну Фасад
1:14 Структура патерну Фасад
1:44 Застосовність патерну Фасад
2:12 Кроки реалізації патерну Фасад
2:46 Переваги та недоліки патерну Фасад
3:15 Приклад реалізації на мові програмування Java
3:52 Висновки
4:24 Джерела

Додаток Б
Слайди презентації №1

Рисунок Б.1 - Фасад

Рисунок Б.2 - Проблема та рішення патерну Фасад

Рисунок Б.3 - Структура патерну Фасад

Рисунок Б.4 - Застосовність патерну Фасад

Рисунок Б.5 - Кроки реалізації патерну Фасад

Рисунок Б.6 - Переваги та недоліки патерну Фасад

Рисунок Б.7 - Приклад реалізації на мові програмування Java

Рисунок Б.8 - Висновки

Рисунок Б.9 - Джерела

Додаток В
Приклад реалізації на мові програмування Java

// Класи підсистеми
class VideoConverter {
    public void convertVideo(String fileName) {
        System.out.println("Converting video file " + fileName + "...");
        // Реальна логіка конвертації відео
    }
}

class AudioMixer {
    public void mixAudio(String fileName) {
        System.out.println("Mixing audio in file " + fileName + "...");
        // Реальна логіка мікшування та обробки аудіо
    }
}

// Фасад
class MediaFacade {
    private VideoConverter videoConverter;
    private AudioMixer audioMixer;

    public MediaFacade() {
        this.videoConverter = new VideoConverter();
        this.audioMixer = new AudioMixer();
    }

    public void processMediaFile(String fileName) {
        // Визиває потрібні методи у правильному порядку
        videoConverter.convertVideo(fileName);
        audioMixer.mixAudio(fileName);
        System.out.println("Media file " + fileName + " processed successfully!");
    }
}

// Клієнт
public class FacadeExample {
    public static void main(String[] args) {
        // Створюємо екземпляр фасаду
        MediaFacade mediaFacade = new MediaFacade();
        // Викликаємо метод фасаду
        mediaFacade.processMediaFile("example.mp4");
    }
}



